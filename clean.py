#!/usr/bin/python3
# -*- coding=utf-8 -*-

# Copyright (c) 2024 Robert LaRocca <https://www.laroccx.com>

# This source code is governed by a MIT-style license that can be found
# in the included LICENSE file. If not, see <https://mit-license.org/>.

__version__ = "1.0.1"
__release__ = "beta" # options devel, beta, release, stable

import argparse
import glob
import os
import shutil
import sys

# ----- Required global variables ----- #

script_filename = os.path.basename(__file__)
script_name = "Clean"
user_home = os.path.expanduser("~")
user_home_abspath = os.path.abspath(os.path.expanduser("~"))

# ----- Required global variables ----- #

parser = argparse.ArgumentParser("clean", description="Remove history files generated by popular shells and command-line programs.")
parser.add_argument("-v", "--version", help="show version information and exit", action="store_true")
parser.add_argument("-a", "--all", help="remove all history files", action="store_true")
parser.add_argument("-A", "--almost", help="remove almost all history files", action="store_true")
parser.add_argument("-m", "--most", help="remove shell history files [default]", action="store_true")
parser.add_argument("-P", "--password", help="remove passwords from history files [devel]", action="store_true")
parser.add_argument("-R", "--redact", help="redact passwords in history files [devel]", action="store_true")
parser.add_argument("-c", "--clear", help="clear the screen", action="store_true")
parser.add_argument("-x", "--exit", help="exit the current shell session", action="store_true")
parser.add_argument("-r", "--reboot", help="reboot the system", action="store_true")
parser.add_argument("-s", "--shutdown", help="shutdown the system", action="store_true")
parser.add_argument("-z", "--sleep", "--zzz", help="sleep or hybernate the system", action="store_true")
parser.add_argument("-T", "--test", help="show test result and exit", action="store_true")
args = parser.parse_args()


def require_root_privileges():
    if os.name == "posix":
        if os.geteuid() != 0:
            print(f"Error: {script_filename} must be run as root!")
            exit(2)

def require_user_privileges():
    if os.name == "posix":
        if os.geteuid() == 0:
            print(f"Error: {script_filename} must be run as normal user!")
            exit(2)

def show_test():
    print(f"Developer Test")
    exit(0)

def show_help():
    print(f"usage: {script_filename} [-aAmPR] [-c] [-xrsz] [-T] [-h] [-v]")
    exit(0)

def show_version():
    print(f"{script_name} ({script_filename}) v{__version__}-{__release__}")
    exit(0)

def remove_history():
    if os.name == "posix":
        shutil.rmtree(os.path.join(user_home, ".bash_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".bash_sessions"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".mysql_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".psql_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".python_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".rediscli_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".zsh_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".zsh_sessions"), ignore_errors=True)
    elif os.name == "nt":
        shutil.rmtree(os.path.join(user_home, "AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"), ignore_errors=True)

    clear_history()
    if args.clear:
        clear_screen()
    if args.exit:
        exit_shell()
    if args.sleep:
        sleep_host()
    elif args.reboot:
        reboot_host()
    elif args.shutdown:
        shutdown_host()

def remove_history_all():
    if os.name == "posix":
        shutil.rmtree(os.path.join(user_home, ".ansible"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".bash_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".bash_sessions"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".cache"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".lesshst"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".local/share/nano/search_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".motd_shown"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".mysql_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".psql_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".python_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".rediscli_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".selected_editor"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".ssh/known_hosts.old"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".ssh/known_hosts"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".sudo_as_admin_successful"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".viminfo"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".wget-hsts"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".zsh_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, ".zsh_sessions"), ignore_errors=True)
    elif os.name == "nt":
        shutil.rmtree(os.path.join(user_home, "AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"), ignore_errors=True)
        shutil.rmtree(os.path.join(user_home, "AppData\Roaming\Microsoft\Windows\Recent", glob.glob("*.lnk")), recursive=False)
        shutil.rmtree(os.path.join(user_home, "AppData\Roaming\Microsoft\Windows\Recent\AutomaticDestinations", glob.glob("*")), recursive=False)
        shutil.rmtree(os.path.join(user_home, "AppData\Roaming\Microsoft\Windows\Recent\CustomDestinations", glob.glob("*")), recursive=False)

    clear_history()
    if args.clear:
        clear_screen()
    if args.exit:
        exit_shell()
    if args.sleep:
        sleep_host()
    elif args.reboot:
        reboot_host()
    elif args.shutdown:
        shutdown_host()

def clear_history():
    if os.name == "posix":
        os.system("history -c 2> /dev/null")
        os.system("history -p 2> /dev/null")

def clear_screen():
    if os.name == "posix":
        os.system("clear 2> /dev/null")
    elif os.name == "nt":
        os.system("cls")

def reboot_host():
    if os.name == "posix":
        try:
            os.system("sudo shutdown -r +0 2> /dev/null")
        except:
            return 1
    elif os.name == "nt":
        try:
            os.system("shutdown.exe /r /t 0")
        except:
            return 1

def shutdown_host():
    if os.name == "posix":
        try:
            os.system("sudo shutdown -h +0  2> /dev/null")
        except:
            return 1
    elif os.name == "nt":
        try:
            os.system("shutdown.exe /s /t 0")
        except:
            return 1

def sleep_host():
    if os.name == "posix":
        try:
            os.system("sudo shutdown -s +0  2> /dev/null")
        except:
            return 1
    elif os.name == "nt":
        try:
            os.system("shutdown.exe /h /t 0")
        except:
            return 1

def exit_shell():
    os.system("exit")
    exit(5)


def main():
    if args.version:
        show_version()
    elif args.test:
        show_test()

    if args.all:
        remove_history_all()
    elif args.most:
        remove_history()
    else:
        remove_history()

if __name__ == "__main__":
    main()

# vi: syntax=python ts=4 noexpandtab
